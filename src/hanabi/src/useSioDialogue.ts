import { randomNumber, randomInt } from "Random";
import { useEffect, useState } from "react";

export default function useSioDialogue() {
    const [dialogue, setDialogue] = useState(['', -1] as [string, number]);

    const sioDialogues = [
        '綺麗なのな～<code>(Ｕ///\'ᴗ\'///Ｕ)</code>',
        'はわはわ₍₍ ◝(Ｕ^ᴗ^Ｕ)◞ ₎₎',
        'しお、わたあめ食べたいなの～♡',
        'はわ～(Ｕ \'ᴗ\' Ｕ)',
        'また来年も来ようの♡',
        '花火は儚いなのな～(Ｕ ˘ᴗ˘ Ｕ)',
        '花火しゅきしゅき(Ｕ ∩\'ᴗ\'///Ｕ)♡',
        'きみと来られて嬉しまる(Ｕ///\'ᴗ\'///Ｕ)',
        '楽しいなの～(Ｕ⌒▽⌒Ｕ三Ｕ⌒▽⌒Ｕ)',
        'しおのこと…ずっとしゅきしゅきしてての？♡',
        '色んなお色がありまるね～(Ｕ \'ᴗ\' Ｕ)',
        '帰りたくないなのな～(Ｕ´･_･`Ｕ)',
        'しおね、打ち上げ花火観るの産まれて初めてなの～♡',
        '迫力がありまるね～(((Ｕ\'o\'Ｕ)))',
        '夜風が涼しまる(Ｕ ˘ᴗ˘ Ｕ)',
        'タコしんでまる～？（ \'ᴗ\'ＵΞＵ\'ᴗ\'）',
        'あとでたこ焼き食べようの♡',
        'しおと花火、どっちが綺麗？(Ｕ∩ \'ᴗ\' ∩Ｕ)',
        '人の記憶は儚いなのけど、今日のことは絶対に忘れないなの(Ｕ>_<Ｕ)',
        'なてゅ！来てまるね！(Ｕ⌒▽⌒Ｕ)',
        'かき氷冷たいなの～(Ｕ>_<Ｕ)',
        'しおの浴衣似合ってまる？ε(Ｕ^ᴗ^Ｕ)з',
        'あとでうーぱーるぱー釣りしたまるー！(Ｕ>_<Ｕ)',
        'しおはいま幸せってわけ(Ｕ´ \' ᴗ <`Ｕ)ミ☆',
        'お昼に行った水族館、あざらしが可愛かったなのな～(Ｕ ˘ᴗ˘ Ｕ)',
        'さっきから汐のことばかり見て、花火ちゃんと観てまる？(Ｕ¬_¬Ｕ)',
        'いぇいはわいぇい₍₍ ◝(Ｕ^ᴗ^Ｕ)◞ ₎₎',
        'た～まや～(Ｕ⌒▽⌒Ｕ)',
        '今日は連れてきてくれてありがとうの(Ｕ ∩\'ᴗ\'///Ｕ)♡',
        'いいなてゅの想い出になったなの～♡',
        'よく観える場所が取れてよかったなのな(Ｕ ˘ᴗ˘ Ｕ)',
        'いつまでもこんな時間が続きますように(Ｕ \'人\' Ｕ)',
        '...(Ｕ ∩\'ᴗ\'///Ｕ)♡',
        '今日はきみのために特別な浴衣で来たなの(Ｕ ∩\'ᴗ\'///Ｕ)♡',
        'もうすぐ終わっちゃうの寂しまるね(Ｕ´･ω･`Ｕ)',
        'お祭り楽しかったね(Ｕ∩ \'ᴗ\' ∩Ｕ)',
        'りんご飴は恋するりんご色♡',
        'ずぅっと観てても飽きないなのな～(Ｕ \'ᴗ\' Ｕ)',
        'はじめてのなてゅをきみと過ごせてよかったなの(Ｕ ∩\'ᴗ\'///Ｕ)♡',
        'しおもきみのこと......///',
        'きみの甚平似合ってまるよ₍₍ ◝(Ｕ^ᴗ^Ｕ)◞ ₎₎',
        'しおね、花火が散って儚く消えていくところがしゅきしゅき(Ｕ ˘ᴗ˘ Ｕ)',
        'いつかちゃいちぃな花火も一緒にしようの♡',
        'あ、向こうの方に赤がいまる！かわいまるねぇ(Ｕ∩ \'ᴗ\' ∩Ｕ)'
    ];

    const nextBalloonTimeout = randomNumber(6000, 15000);

    useEffect(() => {
        const start = setTimeout(() => {
            setDialogue(prev => {
                // 前回と同じ値は返さないようにする（連続で同じセリフが出るのを防ぐ）
                let nextIndex: number;
                do {
                    nextIndex = 0;//randomInt(sioDialogues.length);
                } while (nextIndex === prev[1]);
                return [sioDialogues[nextIndex], nextIndex];
            });
            const end = setTimeout(() => {
                setDialogue(prev => [prev[0], prev[1]]);
                clearTimeout(end);
            }, 3000);
        }, nextBalloonTimeout);
        return () => clearTimeout(start);
    }, [dialogue]);

    return dialogue[0];
}